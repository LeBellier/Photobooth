#parse("camera/head.vm")
<script>
	function nav(elem) {
		$(".sitesection").hide();
		$("#section_"+elem).show();
	}
	
	function initUi() {
		var helpers = Ractive.defaults.data;
		helpers.lowercase = function(str) { return str?str.toLowerCase():str };
		helpers.uppercase = function(str) { return str?str.toUpperCase():str };
	
		$(".sitesection").hide();
		getJson("$!{request.contextPath}/cameraConfig.json?reRead=true", function(config) {
			console.log(config);
			getJson("$!{request.contextPath}/favedConfigs.json?", function(favedConfigs) {
				console.log(favedConfigs);
				var section_set = $("#section_set");
				section_set.html('');
				var idx = 0;

				var entries = []; 
				for(var confPath in config) {
					idx++;
					var confEntry = config[confPath];
					confEntry.faved = favedConfigs[confEntry.path];

					entries.push({confEntry: confEntry, favInProgress: false, favError: false});
				}
				var ractive = new Ractive({
					el: '#section_set',
					template: '#tplCameraConfigSetting',
					data: {entries: entries, showFavToggle: true, contextPath:"$!{request.contextPath}"}
				});
				ractive.on({
					handleShowFavOnly: function(event, value) {
						var boolVal = !!value; 
						ractive.set('showOnlyFaved', boolVal);
						ractive.set('showFavToggle', !boolVal); 
					},
					handleChange: function(event, entryIndex, val) {
						var ractive = this;
						var allEntries = this.get("entries");
						var entry = allEntries[entryIndex];
						var confEntry = entry.confEntry;
						if(confEntry.type.toString().toLowerCase() == "toggle" && (val === 0 || val) && val == confEntry.intValue) {
							val = 2;
						}
						if(val === undefined) {
							if(confEntry.intValue === 0) {
								val = 0;
							} else {
								val = confEntry.intValue || confEntry.strValue || confEntry.floatValue;
							}
						}
						if(confEntry.valueType == "INT") {
							confEntry.intValue = val;
						} else if(confEntry.valueType == "FLOAT") {
							confEntry.floatValue = val;
						} else if(confEntry.valueType == "STRING") {
							confEntry.strValue = val;
						}
						var url = "$!{request.contextPath}/allsettingset";
						entry.setError = false;
						entry.setInProgress = true;
						ractive.update("entries");
						
						$.ajax({
							method: "POST",
							cache: false,
							url: url,
							data: {
								type: confEntry.type,
								key: confEntry.path,
								value: val
							}
						}).fail(function(jqXHR, textStatus) {
							entry.setInProgress = false;
							entry.setError = true;
							console.log("Error " + jqXHR.status + " on setting faved status for camera config entry: " + jqXHR.statusText);
							ractive.update("entries");
						}).done(function(data) {
							entry.setInProgress = false;
							allEntries[entryIndex].confEntry = data;
							ractive.update("entries");
						});							
					},
					handleFav: function(event, entryIndex) {
						var ractive = this;
						var entry = this.get("entries")[entryIndex];
						var favPath = entry.confEntry.path;
						var favVal = event.node.checked ? "true":"false";
						var url = "$!{request.contextPath}/favsetting?key=" + encodeURIComponent(favPath)
								+ "&value=" + encodeURIComponent(favVal);
						entry.favError = false;
						entry.favInProgress = true;
						ractive.update("entries");
						$.ajax({
							method: "POST",
							cache: false,
							url: url
						}).fail(function(jqXHR, textStatus) {
							entry.favInProgress = false;
							entry.favError = true;
							console.log("Error " + jqXHR.status + " on setting faved status for camera config entry: " + jqXHR.statusText);
							ractive.update("entries");
						}).done(function(data) {
							entry.favInProgress = false;
							entry.confEntry.faved = (data===true);
							ractive.update("entries");
						});
					}
				});
			}, function() { alert('Error loading faved config elements.') });
		}, function() { alert('Error loading config.') });
	}
	
	function getJson(url, successCallback, errorCallback) {
		$.ajax({
			cache: false,
			url: url
		}).done(function(data) {
			successCallback(data);
		}).fail(function(jqXHR, textStatus) {
			console.error("Error obtaining JSON from "+url+". " + textStatus);
			if(errorCallback) {
				errorCallback(textStatus);
			}
		});	
	}
	
	$(document).ready(initUi);
</script>
#set( $HASH = '#' )
<script type="text/ractive" id="tplCameraConfigSetting">
<div class="siteContentElementContainer">
	<div class="fullWidth">
		<input type="button" value="All" class="halfWidth {{${HASH}if !showOnlyFaved}}selectedButton{{/if}}" on-click="@this.fire('handleShowFavOnly', event, false)" />
		<input type="button" value="Favorite" class="halfWidth {{${HASH}if showOnlyFaved}}selectedButton{{/if}}" on-click="@this.fire('handleShowFavOnly', event, true)" />
	</div>
</div>
{{${HASH}each entries:entryIndex}}
	{{${HASH}if confEntry.faved || !showOnlyFaved}}
		#include("camera/configsetting.ractive")
	{{/if}}
{{/each}}	
</script>
<div class="fullWidth">
	<div class="pageHead">GPhoto2Server</div>
	<div class="pageSubHead">
		<div class="navigationContainer">
			#foreach($navopt in ["set", "view", "browse", "script"])
				#if($foreach.count>1)
					|
				#end
				<span><a href="#$!navopt" onclick="javascript:nav('$!navopt');return false">$!navopt</a></span>
			#end
		</div>
	</div>
	<div class="sitesection pageContent scroll" id="section_set">
	</div>
	<div class="sitesection pageContent scroll" id="section_view">
	</div>
	<div class="sitesection pageContent scroll" id="section_browse">
	</div>
	<div class="sitesection pageContent scroll" id="section_script">
	</div>
</div>
#parse("camera/foot.vm")
