#parse("camera/head.vm")
<script>
	var config = {};
	var steps = {};
	var stepsLastId = 0;
	var stepKeys = null;
	var nextStepTimeout = null;
	var nextLoopInterval = null;
	var currentStepAjax = null;
	var running = false;
	var loopCount = 0;
	
	function updateLoopCount(count) {	
		if(count) {
			loopCount = count;
		} else {
			loopCount++;
		}
		$("#loopCounterView").val(loopCount);
	}
	
	function enableConditionInputs(enable, stepId) {
		$('#step'+stepId+'_conditionFrom').prop('disabled', !enable);
		$('#step'+stepId+'_conditionTo').prop('disabled', !enable);
		if(enable) {
			$('#step'+stepId+'_conditionInputs').show();
		} else {
			$('#step'+stepId+'_conditionInputs').hide();
		}
	}
	
	function stepExecutable(stepId) {
		var conditional = $('#step'+stepId+'_conditional').prop('checked');
		if(!conditional) {
			return true;
		} else {
			var from = $('#step'+stepId+'_conditionFrom').val();
			var to = $('#step'+stepId+'_conditionTo').val();
			return loopCount>=from && loopCount<=to;
		}
	}

	function addStep() {
		var stepId = stepsLastId++;
		var stepContainer = $('<div id="step'+stepId+'" class="stepContainer">'
				+'<span onclick="deleteStep('+stepId+')">x</span>&nbsp;'
				+'<input type="checkbox" id="step'+stepId+'_conditional" onchange="javascript:enableConditionInputs(this.checked, '+stepId+')" /><span class="smaller">&nbsp;looplimit</span> '
				+'<span id="step'+stepId+'_conditionInputs" style="display: none"><input id="step'+stepId+'_conditionFrom" type="text" value="0" size="6" disabled="disabled" /><span class="smaller">&nbsp;to&nbsp;</span>'
				+'<input id="step'+stepId+'_conditionTo" type="text" value="10000" size="6" disabled="disabled" /></span>'
				+'<select class="stepType" onchange="updateStepContent('+stepId+')">'
				+'<option value="shoot">Capture</option>'
				+'<option value="wait">Wait</option>'
				+'<option value="config">Change Setting</option>'
				+'</select><span class="stepContent"></span>'
				+'</div>');
		steps[stepId] = {id:stepId};
		$("#stepsContainer").append(stepContainer);
		updateStepContent(stepId);
	}	
	
	function deleteStep(stepId) {
		if(confirm("Delete step?")) {
			$("#step"+stepId).remove();
			delete steps[stepId];
		}
	}
	
	function updateStepProp(stepId, propName, propVal) {
		steps[stepId][propName] = propVal;
	}
	
	function updateStepContent(stepId) {
		var step = steps[stepId];
		var stepType = $("#step"+stepId+" .stepType").val();
		step.type = stepType;
		var stepContent = $("#step"+stepId+" .stepContent");
		stepContent.html("");
		if(stepType == 'config') {
			var configSelect = $('<br/><select class="configSelect" onchange="updateConfigStepContent('+stepId+')"></select><span class="configInput"></span>');
			var confs = Object.keys(config);
			for(var k in confs) {
				var confKey = confs[k];
				var confElement = config[confKey];
				configSelect.append($('<option value="'+confKey+'">'+confElement.label+' ('+confKey+')</option>'));
			}
			stepContent.append(configSelect);
			updateConfigStepContent(stepId);
		} else if(stepType == 'wait') {
			step.waitTime = 1000;
			var waitTimeInput = $('<input type="text" size="8" value="'+step.waitTime+'" onchange="updateStepProp('+stepId+', \'waitTime\', parseInt(this.value))" />');
			stepContent.append(waitTimeInput);
		}
	}
	
	function updateConfigStepContent(stepId) {
		var step = steps[stepId];
		var stepContent = $("#step"+stepId+" .stepContent");
		var configKey = stepContent.find(".configSelect").val();
		var confElement = config[configKey];
		
		step.configKey = configKey;
		step.configType = confElement.type;
		step.configVal = confElement.value;
		if(step.configType.toLowerCase() == 'toggle') {
			step.configVal = confElement.checked? 1 : 0;
		}
		
		var configInputContainer = stepContent.find(".configInput");
		configInputContainer.html("");
		if(confElement.type.toLowerCase()=='radio' || confElement.type.toLowerCase()=='menu') {
			var optSelect = $('<select onchange="updateStepProp('+stepId+', \'configVal\', this.value)"></select>');
			for(var cidx in confElement.choices) {
				var choice = confElement.choices[cidx];
				optSelect.append($('<option value="'+choice+'">'+choice+'</option>'));
			}
			configInputContainer.append(optSelect);
		} else if(confElement.type.toLowerCase()=='toggle') {
			configInputContainer.append($('<input type="checkbox" '+(confElement.value == "1"?'selected="selected"':'')+' onchange="updateStepProp('+stepId+', \'configVal\', this.value?1:0)" />'));
		} else {
			configInputContainer.append($('<input type="text" value="'+confElement.value+'" onchange="updateStepProp('+stepId+', \'configVal\', this.value)" />'));
		}
		
	}
	
	function changeCamSetting(type, key, value, callback) {
		return $.ajax({
			method:"POST",
			url: "/allsettingset",
			data: { type:type, key:key, value:value, skipRedirect: true }
		}).always(callback);
	}

	function populateStepKeys() {
		var stepKeysStr = Object.keys(steps);
		stepKeys=[];
		for(var k in stepKeysStr) {
			stepKeys.push(parseInt(stepKeysStr[k]));
			stepKeys.sort();
		}
		return stepKeys;
	}
	
	function runStepsRepeat() {
		currentStep = null;
		populateStepKeys();
		updateLoopCount(1);
		if(stepKeys.length>0) {
			nextStepTimeout = setTimeout(function() {
				execStep(0);
			}, 1);
		}
	}
	
	function runStepsScheduled(time) {
		currentStep = null;
		populateStepKeys();
		updateLoopCount(1);
		if(stepKeys.length>0) {
			nextLoopInterval = setInterval(function() {
				nextStepTimeout = setTimeout(function() {
					if(running) {
						console.log("Automation - previous cycle didn't finish. Skipping.");
					} else {
						execStep(0, true);
					}
				}, 1);
			}, time);
		}		
	}
	
	function execStep(stepIdIdx, singleRun) {
		running = true;
		if(stepIdIdx>=stepKeys.length) {
			updateLoopCount();
			if(singleRun) {
				stopSteps();
				return;
			} else {
				stepIdIdx = 0;
			}
		}
		var stepId = stepKeys[stepIdIdx];
		var step = steps[stepId];

		if(!stepExecutable(stepId)) {
			nextStepTimeout = scheduleNextStep(stepIdIdx, stepId, singleRun, 1); 
		} else {
			$("#step"+stepId).css("background-color", "green");		
			if(step.type == 'shoot') {
				currentStepAjax = $.ajax({method: "POST", url:"/capture?captureOnly=true"}).always(function() {
					nextStepTimeout = scheduleNextStep(stepIdIdx, stepId, singleRun, 1); 
					currentStepAjax = null;
				});
			} else if(step.type == 'wait') {
				nextStepTimeout = scheduleNextStep(stepIdIdx, stepId, singleRun, step.waitTime);
			} else if(step.type == 'config') {
				currentStepAjax = changeCamSetting(step.configType, step.configKey, step.configVal, function() {
					nextStepTimeout = scheduleNextStep(stepIdIdx, stepId, singleRun, 1);
					currentStepAjax = null;				
				});
			} else {
				nextStepTimeout = scheduleNextStep(stepIdIdx, stepId, singleRun, 1);
			}
		}
	}
	
	function scheduleNextStep(stepIdIdx, stepId, singleRun, time) {
		return setTimeout(function() { $("#step"+stepId).css("background-color", "transparent"); execStep(++stepIdIdx, singleRun); }, time);
	}
	
	function stopSteps() {
		if(currentStepAjax!=null) {
			currentStepAjax.abort();
			currentStepAjax = null;
		}
		if(nextStepTimeout!=null) {
			clearTimeout(nextStepTimeout);
			nextStepTimeout = null;
		}
		$(".stepContainer").css("background-color", "transparent");
		running = false;
		updateConfig();
	}
	
	function stopSchedule() {
		if(nextLoopInterval!=null) {
			clearInterval(nextLoopInterval);
			nextLoopInterval = null;
		}
	}	
	
	function updateConfig() {
		$.ajax({
			cache: false,
			url: "/cameraConfig.json"
		}).done(function(data) {
			config = data;
			console.log(config);
		}).fail(function(jqXHR, textStatus) {
			console.log(jqXHR);
			alert("Error loading camera config JSON. " + textStatus);
		});	
	}

	$(document).ready(function () {
		updateConfig();
		$("#btnAddStep").click(addStep);
		$("#btnRun").click(function() {
			$("#btnsStopped").hide();
			runStepsRepeat();
			$("#btnsRunning").show();
		});
		$("#btnRunEvery").click(function() {
			$("#btnsStopped").hide();
			runStepsScheduled($("#runEveryInput").val());
			$("#btnsRunning").show();
		});
		$("#btnStop").click(function() {
			stopSteps();
			stopSchedule();
			$("#btnsRunning").hide();
			$("#btnsStopped").show();
		});
	});
</script>
#pageHead("Automation")
<div id="stepsContainer">
</div>
<hr/>
<div class="fullWidth buttonPanel" id="btnsStopped">
	<div id="btnAddStep">Add step</div>
	<hr/>
	<input type="button" id="btnRun" value="Run" />
	<input type="button" id="btnRunEvery" value="Run every milliseconds..." />
	<input type="text" value="5000" size="8" id="runEveryInput" />
</div>
<div class="fullWidth buttonPanel" id="btnsRunning" style="display: none">
	<div>Loop: <input type="text" id="loopCounterView" value="0" readonly="readonly" size="10" /></div>
	<hr/>
	<input type="button" id="btnStop" value="Stop" />	
</div>
#pageFoot()
